---
name: unit

on:
  workflow_call: {}

# golangci-lint-action requires those permissions to annotate issues in the PR.
permissions:
  contents: read
  pull-requests: read

env:
  GO_VERSION: 1.23
  GOLANGCI_LINT_VERSION: v1.59
  TEST_DATA_URL: "https://d23912a6309zf7.cloudfront.net/ci"

jobs:
  e2e-cmd_report:
    name: "e2e-cmd_report"
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: opct-linux-amd64
          path: /tmp/build/

      - name: Running report
        env:
          ARTIFACT: 4.15.0-20240228-HighlyAvailable-vsphere-None.tar.gz
          OPCT: /tmp/build/opct-linux-amd64
        run: |
          TEST_URL=${TEST_DATA_URL}/${ARTIFACT}

          echo "> Downloading sample artifact: ${TEST_URL}"
          wget -qO /tmp/result.tar.gz "${TEST_URL}"

          echo "> Setting run permissions to OPCT:"
          chmod u+x ${OPCT}

          echo "> Running OPCT report (simple):"
          ${OPCT} report /tmp/result.tar.gz

          echo "> Running OPCT report (advanced):"
          ${OPCT} report /tmp/result.tar.gz \
            --log-level=debug \
            --save-to=/tmp/results-data \
            --skip-server=true \
            --skip-baseline-api=true

  e2e-cmd_adm-parse-etcd-logs:
    name: "e2e-cmd_adm-parse-etcd-logs"
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: opct-linux-amd64
          path: /tmp/build/

      - name: Preparing testdata
        env:
          ARTIFACT: "must-gather-etcd-logs.tar.gz"
          CUSTOM_BUILD_PATH: /tmp/build/opct-linux-amd64
          LOCAL_TEST_DATA: /tmp/must-gather.tar.gz
          LOCAL_TEST_DATA_DIR: /tmp/must-gather
        run: |
          TEST_URL=${TEST_DATA_URL}/${ARTIFACT}
          echo "> Downloading sample artifact: ${TEST_URL}"
          wget -qO ${LOCAL_TEST_DATA} "${TEST_URL}"

          echo "> Setting run permissions to OPCT:"
          chmod u+x ${CUSTOM_BUILD_PATH}

          echo "> Extracting testdata:"
          mkdir ${LOCAL_TEST_DATA_DIR}
          tar xfz ${LOCAL_TEST_DATA} -C ${LOCAL_TEST_DATA_DIR}

      - name: "e2e stdin reader: cat <etcd pod logs> | opct adm parse-etcd-logs"
        env:
          CUSTOM_BUILD_PATH: /tmp/build/opct-linux-amd64
          TEST_DATA_DIR: /tmp/must-gather
          NS_PATH_ETCD: namespaces/openshift-etcd/pods
          LOG_PATH: etcd/etcd/logs
        run: |
          cat ${TEST_DATA_DIR}/*/*/${NS_PATH_ETCD}/*/${LOG_PATH}/*.log | \
            ${CUSTOM_BUILD_PATH} adm parse-etcd-logs

      - name: "e2e must-gather dir: opct adm parse-etcd-logs <must-gather-dir>"
        env:
          CUSTOM_BUILD_PATH: /tmp/build/opct-linux-amd64
          TEST_DATA_DIR: /tmp/must-gather
        run: |
          ${CUSTOM_BUILD_PATH} adm parse-etcd-logs ${TEST_DATA_DIR}

      - name: |
          e2e aggregate by hour: opct adm parse-etcd-logs
            --aggregator hour <must-gather-dir>
        env:
          OPCT: /tmp/build/opct-linux-amd64
          TEST_DATA_DIR: /tmp/must-gather
        run: |
          ${OPCT} adm parse-etcd-logs --aggregator hour ${TEST_DATA_DIR}

      - name: |
          e2e ignore error counters: opct adm parse-etcd-logs
            --skip-error-counter=true <must-gather-dir>
        env:
          OPCT: /tmp/build/opct-linux-amd64
          TEST_DATA_DIR: /tmp/must-gather
        run: |
          ${OPCT} adm parse-etcd-logs \
            --skip-error-counter=true ${TEST_DATA_DIR}

  e2e-cmd_adm-parse-metrics:
    name: "e2e-cmd_adm-parse-metrics"
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: opct-linux-amd64
          path: /tmp/build/

      - name: Preparing testdata
        env:
          PREFIX: ci-external-aws-ccm_
          VERSION: 1757495441294888960-artifacts_must-gather-metrics.tar.xz
          CUSTOM_BUILD_PATH: /tmp/build/opct-linux-amd64
          LOCAL_TEST_DATA: /tmp/opct-metrics.tar.xz
        run: |
          ARTIFACT=${PREFIX}${VERSION}
          TEST_URL=${TEST_DATA_URL}/${ARTIFACT}
          echo "> Downloading sample artifact: ${TEST_URL}"
          wget -qO ${LOCAL_TEST_DATA} "${TEST_URL}"

          echo "> Setting exec permissions to OPCT:"
          chmod u+x ${CUSTOM_BUILD_PATH}

      - name: "e2e parse metrics: opct adm parse-etcd-logs <must-gather-dir>"
        env:
          CUSTOM_BUILD_PATH: /tmp/build/opct-linux-amd64
          LOCAL_TEST_DATA: /tmp/opct-metrics.tar.xz
        run: |
          ${CUSTOM_BUILD_PATH} adm parse-metrics \
            --input ${LOCAL_TEST_DATA} --output /tmp/metrics
          tree /tmp/metrics

  e2e-cmd_adm-baseline:
    name: "e2e-cmd_adm-baseline"
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: opct-linux-amd64
          path: /tmp/build/

      - name: Preparing testdata
        env:
          OPCT: /tmp/build/opct-linux-amd64
        run: |
          echo "> Setting exec permissions to OPCT:"
          chmod u+x ${OPCT}

      - name: "e2e adm baseline: opct adm baseline (list|get)"
        env:
          OPCT: /tmp/build/opct-linux-amd64
        run: |
          echo -e "\n\t#>> List latest baseline results"
          ${OPCT} adm baseline list

          echo -e "\n\t#>> List all baseline results"
          ${OPCT} adm baseline list --all

          echo -e "\n\t#>> Retrieve a baseline result by name"
          ${OPCT} adm baseline get --name 4.16_None_latest --dump

          echo -e "\n\t#>> Retrieve a baseline result by release and platform"
          ${OPCT} adm baseline get --release 4.15 --platform None

  e2e-cmd_adm-generate-checks-docs:
    name: "e2e-cmd_adm-generate-checks-docs"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: opct-linux-amd64
          path: /tmp/build/
      - name: "e2e adm generate checks-docs"
        env:
          OPCT: /tmp/build/opct-linux-amd64
        run: |
          echo "> Setting exec permissions to OPCT:"
          chmod u+x ${OPCT}

          echo -e "\n\t#>> Generate documentation for all checks"
          ${OPCT} adm generate checks-docs

          echo -e "\n\t#>> Checking diff of rules documentation"
          GIT_PAGER=cat git diff docs/review/rules.md

          # Enforce generated markdwn with the rules documentation page
          echo -e "\n\t#>> Fail if documentation not updated. Review and commit the changes to docs/review/rules.md"
          git diff --quiet docs/review/rules.md

  e2e-cmd_adm-cleaner:
    name: "e2e-cmd_adm-cleaner"
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: opct-linux-amd64
          path: /tmp/build/

      - name: Preparing testdata
        env:
          ARTIFACT: fake-cleaner-v2.tar.gz
          CUSTOM_BUILD_PATH: /tmp/build/opct-linux-amd64
          LOCAL_TEST_DATA: /tmp/artifact.tar.gz
        run: |
          TEST_URL=${TEST_DATA_URL}/${ARTIFACT}
          echo "> Downloading sample artifact: ${TEST_URL}"
          wget -qO ${LOCAL_TEST_DATA} "${TEST_URL}"

          echo "> Setting exec permissions to OPCT:"
          chmod u+x ${CUSTOM_BUILD_PATH}

      - name: "e2e run: opct adm cleaner"
        env:
          CUSTOM_BUILD_PATH: /tmp/build/opct-linux-amd64
          LOCAL_TEST_DATA: /tmp/artifact.tar.gz
        run: |
          ${CUSTOM_BUILD_PATH} adm cleaner \
            --input ${LOCAL_TEST_DATA} \
            --output /tmp/redacted.tar.gz

          mkdir data
          tar xfz /tmp/redacted.tar.gz -C data

      - name: "e2e run: opct adm cleaner: ensure JSONPatchRules"
        env:
          CUSTOM_BUILD_PATH: /tmp/build/opct-linux-amd64
          LOCAL_TEST_DATA: /tmp/artifact.tar.gz
        run: |
          # Prevent yaml-ci issues
          MCC=machineconfiguration.openshift.io_v1_controllerconfigs.json
          RES=$(jq .items[].spec.internalRegistryPullSecret data/resources/cluster/${MCC})
          echo "RES=${RES}"
          want="\"REDACTED\""
          if [[ "${RES}" != "${want}" ]]; then
            echo "Unexpected result"
            echo "Got: ${RES}"
            echo "Want: ${want}"
          fi

      - name: "e2e run: opct adm cleaner: ensure RemoveFilePatternRules"
        env:
          CUSTOM_BUILD_PATH: /tmp/build/opct-linux-amd64
          LOCAL_TEST_DATA: /tmp/artifact.tar.gz
        run: |
          # Prevent yaml-ci issues
          count=$(ls data/resources/ns/*/packages.operators.coreos.com_v1_packagemanifests.json | wc -l)
          want=1
          if [[ ${count} -ne ${want} ]]; then
            echo "File cleaner left behind files: packages.operators.coreos.com_v1_packagemanifests.json"
            echo "Got: ${count}"
            echo "Want: ${want}"
          fi
